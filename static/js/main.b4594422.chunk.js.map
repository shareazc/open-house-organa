{"version":3,"sources":["components/Scanner.jsx","components/Navigation.jsx","components/Summary.jsx","components/NoMatch.jsx","App.js","serviceWorker.js","index.js"],"names":["Scanner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","result","handleScan","bind","assertThisInitialized","data","setState","err","console","error","react_default","a","createElement","lib_default","style","height","width","onError","handleError","onScan","Component","Navigation","Navbar","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","react_router_dom","to","Summary","Navigation_Navigation","NoMatch","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAyCeA,cArCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IACPC,OAAQ,aAGVT,EAAKU,WAAaV,EAAKU,WAAWC,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IAPFA,0EASPa,GACTV,KAAKW,SAAS,CACZL,OAAQI,wCAGAE,GACVC,QAAQC,MAAMF,oCAQd,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEX,MAAOL,KAAKI,MAAMC,MAClBc,MATe,CACnBC,OAAQ,IACRC,MAAO,KAQHC,QAAStB,KAAKuB,YACdC,OAAQxB,KAAKO,aAEfQ,EAAAC,EAAAC,cAAA,SAAIjB,KAAKI,MAAME,gBAhCDmB,6BCOTC,EAAa,kBAExBX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,OAAO,MACfb,EAAAC,EAAAC,cAACU,EAAA,EAAOE,MAAR,eACAd,EAAAC,EAAAC,cAACU,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7BhB,EAAAC,EAAAC,cAACU,EAAA,EAAOK,SAAR,CAAiBC,GAAG,oBAChBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,UAAU,WACXpB,EAAAC,EAAAC,cAACiB,EAAA,EAAIE,KAAL,KAAUrB,EAAAC,EAAAC,cAACiB,EAAA,EAAIG,KAAL,KAAUtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAI,WAAV,YACpBxB,EAAAC,EAAAC,cAACiB,EAAA,EAAIE,KAAL,KAAUrB,EAAAC,EAAAC,cAACiB,EAAA,EAAIG,KAAL,KAAUtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAI,YAAV,gBCfjBC,EAAU,kBACnBzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,uBCJKyB,EAAU,kBACnB3B,EAAAC,EAAAC,cAAA,6BCkBW0B,MAdf,WACE,OACE5B,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACdpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAapD,IACrCoB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaP,IACtCzB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOG,UAAaL,QCFTM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4594422.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport QrReader from 'react-qr-scanner'\r\n \r\nclass Scanner extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      delay: 100,\r\n      result: 'No result',\r\n    }\r\n \r\n    this.handleScan = this.handleScan.bind(this)\r\n  }\r\n  handleScan(data){\r\n    this.setState({\r\n      result: data,\r\n    })\r\n  }\r\n  handleError(err){\r\n    console.error(err)\r\n  }\r\n  render(){\r\n    const previewStyle = {\r\n      height: 240,\r\n      width: 320,\r\n    }\r\n \r\n    return(\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          style={previewStyle}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          />\r\n        <p>{this.state.result}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Scanner; ","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n//import styled from \"styled-components\";\r\n\r\n/*\r\nconst Styles = styled.div`\r\n`;\r\n*/\r\n\r\nexport const Navigation = () => (\r\n\r\n  <Navbar expand=\"lg\">\r\n  <Navbar.Brand>Organa</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"ml-auto\">\r\n          <Nav.Item><Nav.Link><Link to =\"/waiter\">Meserx</Link></Nav.Link></Nav.Item>\r\n          <Nav.Item><Nav.Link><Link to =\"/kitchen\">Cocina</Link></Nav.Link></Nav.Item>\r\n      </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n\r\n);\r\n","import React from 'react';\r\nimport {Navigation} from './Navigation';\r\n\r\nexport const Summary = () => (\r\n    <div>\r\n        <Navigation />\r\n        <h1>Summary</h1>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nexport const NoMatch = () => (\r\n    <h1>No Match</h1>\r\n)","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Scanner from './components/Scanner';\nimport { Summary } from './components/Summary';\nimport { NoMatch } from './components/NoMatch';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router>\n       <Switch>\n         <Route exact path = \"/\" component = {Scanner} />\n         <Route path = \"/summary\" component = {Summary} />\n         <Route component = {NoMatch} />\n       </Switch>\n     </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}